/* eslint-disable @typescript-eslint/no-var-requires */
const path = require('path')
const webpack = require('webpack')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const CopyPlugin = require('copy-webpack-plugin')

const devMode = process.env.NODE_ENV !== 'production'

const rootPath = (...args) => args.reduce((fullPath, pathComponent) => path.join(fullPath, pathComponent), process.cwd())

module.exports = {
  entry: [rootPath('src/app.tsx')],

  devtool: 'source-map',

  output: {
    path: path.join(__dirname, 'dist'),
    filename: '[name].js'
  },

  module: {
    rules: [
      {
        test: /\.ts(x?)$/,
        exclude: /node_modules/,
        use: ['ts-loader']
      },
      {
        test: /\.less$/,
        use: [
          'style-loader',
          {
            loader: '@teamsupercell/typings-for-css-modules-loader',
            options: {
              banner: '// Autogenerated during build phase.\n// Any changes you make to this file will be overwritten.'
            }
          },
          {
            loader: 'css-loader',
            options: {
              modules: {
                mode: 'local',
                localIdentName: devMode ? '[path][name]__[local]' : '[hash:base64:12]'
              },
              sourceMap: true
            }
          },
          {
            loader: 'less-loader',
            options: {
              sourceMap: true
            }
          }
        ]
      },
      {
        test: /\.css$/,
        use: [MiniCssExtractPlugin.loader, 'css-loader']
      },
      {
        test: /\.jpe?g$|\.gif$|\.ico$|\.png$|\.svg$/,
        use: 'file-loader?name=[name].[ext]?[hash]'
      },
      {
        test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
        use: 'url-loader?mimetype=application/font-woff'
      },
      {
        test: /\.(ttf|eot)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
        use: 'file-loader'
      },
      {
        test: /\.otf(\?.*)?$/,
        use: 'file-loader?name=/fonts/[name].[ext]&mimetype=application/font-otf'
      }
    ]
  },

  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.jsx']
  },

  devServer: {
    contentBase: rootPath('dist'),
    publicPath: '/',
    open: false,
    hot: true,
    quiet: false,
    noInfo: false,
    historyApiFallback: false
  },

  plugins: [
    new HtmlWebpackPlugin({
      chunks: ['main'],
      template: rootPath('public/index.html'),
      favicon: rootPath('public/favicon.ico'),
      minify: {
        collapseWhitespace: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        useShortDoctype: true
      }
    }),
    new CopyPlugin({
      patterns: [
        { from: './public/favicon.ico', to: './' },
        { from: './public/manifest.json', to: './' },
        { from: './public/apple-touch-icon.png', to: './' },
        { from: './public/favicon-32x32.png', to: './' },
        { from: './public/favicon-16x16.png', to: './' },
        { from: './public/browserconfig.xml', to: './' }
      ]
    }),
    new CleanWebpackPlugin(),
    new webpack.DefinePlugin({
      __DEV__: devMode
    }),
    new MiniCssExtractPlugin({
      filename: devMode ? '[name].css' : '[name].[hash].css',
      chunkFilename: devMode ? '[id].css' : '[id].[hash].css'
    })
  ]
}
